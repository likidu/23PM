/**
 * Generated by orval v6.9.6 üç∫
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from '@sveltestack/svelte-query';
import type {
  UseMutationOptions,
  MutationFunction,
} from '@sveltestack/svelte-query';
import type {
  PhoneNumber,
  LoginWithSMS200,
  LoginWithSMS400,
  LoginWithSMSBody,
} from '.././model';
import { client } from '../../client';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * @summary Send SMS code for login
 */
export const sendCode = (phoneNumber: PhoneNumber) => {
  return client<void>({
    url: `/auth/sendCode`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: phoneNumber,
  });
};

export type SendCodeMutationResult = NonNullable<
  Awaited<ReturnType<typeof sendCode>>
>;
export type SendCodeMutationBody = PhoneNumber;
export type SendCodeMutationError = unknown;

export const useSendCode = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sendCode>>,
    TError,
    { data: PhoneNumber },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof sendCode>>,
    { data: PhoneNumber }
  > = (props) => {
    const { data } = props ?? {};

    return sendCode(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof sendCode>>,
    TError,
    { data: PhoneNumber },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary Login with SMS
 */
export const loginWithSMS = (loginWithSMSBody: LoginWithSMSBody) => {
  return client<LoginWithSMS200>({
    url: `/auth/loginOrSignUpWithSMS`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: loginWithSMSBody,
  });
};

export type LoginWithSMSMutationResult = NonNullable<
  Awaited<ReturnType<typeof loginWithSMS>>
>;
export type LoginWithSMSMutationBody = LoginWithSMSBody;
export type LoginWithSMSMutationError = LoginWithSMS400;

export const useLoginWithSMS = <
  TError = LoginWithSMS400,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof loginWithSMS>>,
    TError,
    { data: LoginWithSMSBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof loginWithSMS>>,
    { data: LoginWithSMSBody }
  > = (props) => {
    const { data } = props ?? {};

    return loginWithSMS(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof loginWithSMS>>,
    TError,
    { data: LoginWithSMSBody },
    TContext
  >(mutationFn, mutationOptions);
};
